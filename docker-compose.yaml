env_file:
  - .env

version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ihabrajaoui
      POSTGRES_DB: projet2
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  webserver:
    build: .
    container_name: airflow-webserver
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: 'RsNaVQf0q-_2yaxXeZ_KN1xlKJrIUpcs4FONXnyzVhU='
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
      AIRFLOW__WEBSERVER__RBAC: 'True'
      AIRFLOW__WEBSERVER__DEFAULT_USER_ROLE: 'Admin'
      PYTHONPATH: /opt/airflow/src:/opt/airflow/dags:/opt/airflow
    volumes:
      - ./data:/opt/airflow/data
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./data/processed:/opt/airflow/data/processed
    ports:
      - "8080:8080"
    command: >
      bash -c "
      airflow db upgrade &&
      airflow users create --username anouarFG --firstname Anouar --lastname Farroug --role Admin --email Anouarfarroug1@gmail.com --password anouar &&
      airflow webserver"

  scheduler:
    build: .
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: 'RsNaVQf0q-_2yaxXeZ_KN1xlKJrIUpcs4FONXnyzVhU='
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@postgres/airflow'
      PYTHONPATH: /opt/airflow/src:/opt/airflow/dags:/opt/airflow
    volumes:
      - ./data:/opt/airflow/data
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
    command: >
      bash -c "
      airflow db upgrade &&
      airflow scheduler"

  # FastAPI Inference API
  ids-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ids-api
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./src/api:/app/src/api
      - ./data/processed:/app/data/processed
    environment:
      - PYTHONPATH=/app
    depends_on:
      - webserver
      - scheduler

  # cAdvisor for container monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # Prometheus for metrics scraping
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
      - webserver
      - ids-api

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  postgres-db-volume:
  grafana-storage:
